package test.alx.common.util{  import alx.common.test.CUnitTest;  import alx.common.util.CRandom;  public class CRandomUnitTest extends CUnitTest  {    public function CRandomUnitTest( strLabel:String):void    {      super( strLabel);    }    protected override function testList():Array    {      return new Array( this.testCreation                      , this.testSeed                      , this.testNextUint                      , this.testNextFloat                      , this.testNextInt                      , this.testNextBoolean                      , this.testNextSign                      , this.testNextBit                      );    }    public function testCreation():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isEqual( 'random.getSeed()'                              , random.getSeed()                              , 47                              );      var randomN:CRandom = new CRandom();    }    public function testSeed():void    {      var random1:CRandom = new CRandom( 47);      var random2:CRandom = new CRandom( 47);      this.getTester().isEqual( 'random1.nextFloat() ===  random2.nextFloat()'                              , random1.nextFloat()                              , random2.nextFloat()                              );      this.getTester().isEqual( 'random1.nextFloat() ===  random2.nextFloat()'                              , random1.nextFloat()                              , random2.nextFloat()                              );      this.getTester().isEqual( 'random1.nextFloat() ===  random2.nextFloat()'                              , random1.nextFloat()                              , random2.nextFloat()                              );      this.getTester().isEqual( 'random1.nextFloat() ===  random2.nextFloat()'                              , random1.nextFloat()                              , random2.nextFloat()                              );            var random3:CRandom = new CRandom( 47);      var nRandomValue:Number = random3.nextFloat();      random3.setSeed( 47);      this.getTester().isEqual( 'random3.nextFloat() === nRandomValue'                              , random3.nextFloat()                              , nRandomValue                              );    }        public function testNextUint():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isTrue( 'random.nextUint() >= 0'                              , ( random.nextUint() >= 0)                              );      this.getTester().isTrue( 'random.nextUint() < uint.MAX_VALUE'                              , ( random.nextUint() < uint.MAX_VALUE)                              );           var randomN:CRandom = new CRandom();      this.getTester().isTrue( 'randomN.nextUint( 0, 5)'                              , ( randomN.nextUint( 0, 5) < 5)                              );      this.getTester().isTrue( 'randomN.nextUint( 5, 10)'                              , ( randomN.nextUint( 5, 10) >= 5)                              );      this.getTester().isTrue( 'randomN.nextUint( 5, 10)'                              , ( randomN.nextUint( 5, 10) < 10)                              );            try      {        random.nextUint( 5, 3);        this.getTester().isFalse( 'random.nextUint( 5, 3)', true);      }      catch ( e:Error){}    }    public function testNextFloat():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isTrue( 'random.nextFloat() >= 0'                              , ( random.nextFloat() >= 0)                              );      this.getTester().isTrue( 'random.nextFloat() < Number.MAX_VALUE'                              , ( random.nextFloat() < Number.MAX_VALUE)                              );      var randomN:CRandom = new CRandom();      this.getTester().isTrue( 'randomN.nextFloat( 0, 5)'                              , ( randomN.nextFloat( 0, 5) < 5)                              );      this.getTester().isTrue( 'randomN.nextFloat( 5, 10)'                              , ( randomN.nextFloat( 5, 10) >= 5)                              );      this.getTester().isTrue( 'randomN.nextFloat( 5, 10)'                              , ( randomN.nextFloat( 5, 10) < 10)                              );            try      {        random.nextFloat( NaN, NaN);        this.getTester().isFalse( 'random.nextFloat( NaN, NaN)', true);      }      catch ( e:Error){}      try      {        random.nextFloat( 0, NaN);        this.getTester().isFalse( 'random.nextFloat( 0, NaN)', true);      }      catch ( e:Error){}      try      {        random.nextFloat( NaN, 10);        this.getTester().isFalse( 'random.nextFloat( NaN, 10)', true);      }      catch ( e:Error){}      try      {        random.nextFloat( Infinity, 10);        this.getTester().isFalse( 'random.nextFloat( Infinity, 10)', true);      }      catch ( e:Error){}      try      {        random.nextFloat( 0, Infinity);        this.getTester().isFalse( 'random.nextFloat( 0, Infinity)', true);      }      catch ( e:Error){}      try      {        random.nextFloat( 5, 3);        this.getTester().isFalse( 'random.nextFloat( 5, 3)', true);      }      catch ( e:Error){}    }    public function testNextInt():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isTrue( 'random.nextInt() >= 0'                              , ( random.nextInt() >= 0)                              );      this.getTester().isTrue( 'random.nextInt() < int.MAX_VALUE'                              , ( random.nextInt() < int.MAX_VALUE)                              );           var randomN:CRandom = new CRandom();      this.getTester().isTrue( 'randomN.nextInt( 0, 5)'                              , ( randomN.nextInt( 0, 5) < 5)                              );      this.getTester().isTrue( 'randomN.nextInt( 5, 10)'                              , ( randomN.nextInt( 5, 10) >= 5)                              );      this.getTester().isTrue( 'randomN.nextInt( 5, 10)'                              , ( randomN.nextInt( 5, 10) < 10)                              );    }    public function testNextBoolean():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isEqual( 'random.nextBoolean()'                              , random.nextBoolean()                              , true                              );      this.getTester().isEqual( 'random.nextBoolean()'                              , random.nextBoolean()                              , false                              );      this.getTester().isEqual( 'random.nextBoolean()'                              , random.nextBoolean()                              , true                              );      this.getTester().isEqual( 'random.nextBoolean( 0)'                              , random.nextBoolean( 0)                              , false                              );      this.getTester().isEqual( 'random.nextBoolean( 1)'                              , random.nextBoolean( 1)                              , true                              );      try      {        random.nextBoolean( NaN);        this.getTester().isFalse( 'random.nextBoolean( NaN)', true);      }      catch ( e:Error){}      try      {        random.nextBoolean( Infinity);        this.getTester().isFalse( 'random.nextBoolean( Infinity)', true);      }      catch ( e:Error){}      try      {        random.nextBoolean( -1);        this.getTester().isFalse( 'random.nextBoolean( -1)', true);      }      catch ( e:Error){}      try      {        random.nextBoolean( 1.1);        this.getTester().isFalse( 'random.nextBoolean( 1.1)', true);      }      catch ( e:Error){}    }    public function testNextSign():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isEqual( 'random.nextSign()'                              , random.nextSign()                              , 1                              );      this.getTester().isEqual( 'random.nextSign()'                              , random.nextSign()                              , -1                              );      this.getTester().isEqual( 'random.nextSign()'                              , random.nextSign()                              , 1                              );            this.getTester().isEqual( 'random.nextSign( 0)'                              , random.nextSign( 0)                              , -1                              );      this.getTester().isEqual( 'random.nextSign( 1)'                              , random.nextSign( 1)                              , 1                              );    }    public function testNextBit():void    {      var random:CRandom = new CRandom( 47);      this.getTester().isEqual( 'random.nextBit()'                              , random.nextBit()                              , 1                              );      this.getTester().isEqual( 'random.nextBit()'                              , random.nextBit()                              , 0                              );      this.getTester().isEqual( 'random.nextBit()'                              , random.nextBit()                              , 1                              );            this.getTester().isEqual( 'random.nextBit( 0)'                              , random.nextBit( 0)                              , 0                              );      this.getTester().isEqual( 'random.nextBit( 1)'                              , random.nextBit( 1)                              , 1                              );    }  }}