package alx.common.util{  /**   * Random number generator interface.   * @author Alexander Volkov   * @version 1.0   */  public interface IRandom   {    /**     * Gets current seed value.     * @return uint     */    function getSeed():uint;    /**     * Sets current seed value.     * @return uint     */    function setSeed( nSeed:uint):void;    /**     * Generates next integer value in [nMin;nMax).     * @param nMin uint     * @param nMax uint     * @return uint     * @throws ArgumentError if arguments are not valid     */    function nextUint( nMin:uint = 0, nMax:uint = uint.MAX_VALUE):uint;    /**     * Generates next random float in [nMin;nMax).     * @param nMin Number     * @param nMax Number     * @return Number     * @throws ArgumentError if arguments are not valid     */    function nextFloat( nMin:Number = 0, nMax:Number = Number.MAX_VALUE):Number;    /**     * Generates next integer value in [nMin;nMax).     * @param nMin int     * @param nMax int     * @return int     * @throws ArgumentError if arguments are not valid     */    function nextInt( nMin:int = 0, nMax:int = int.MAX_VALUE):int;    /**     * Generates next boolean value with a certain chance.     * @param nChance Number     * @return Boolean     * @throws ArgumentError if argument is not valid     */    function nextBoolean( nChance:Number = 0.5):Boolean;    /**     * Generates next sign (1 or -1) with a certain chance.     * @param nChance Number     * @return int     * @throws ArgumentError if argument is not valid     */    function nextSign( nChance:Number = 0.5):int;    /**     * Generates next bit (1 or 0) with a certain chance.     * @param nChance Number     * @return int     * @throws ArgumentError if argument is not valid     */    function nextBit( nChance:Number = 0.5):int;  }}