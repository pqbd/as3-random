package alx.common.util{  /**   * Random number generator.   * @author Alexander Volkov   * @version 1.2   */  public class CRandom extends CAbstractRandom  {    /** internal needs constant*/    private static const MULT:uint = 0xBBDD9CCD;    /** internal needs constant*/    private static const OFFSET:uint = 0xB;    /**     * Creates new random generator.     * @param nSeed uint     */    public function CRandom( nSeed:uint = 0):void    {      super( nSeed);    }    /**     * Generates next random number.     * @param nBits uint     * @return uint     */    protected function next( nBits:uint):uint    {      super.setSeed(( super.getSeed() * CRandom.MULT + CRandom.OFFSET));      return ( super.getSeed() >>> ( 32 - nBits));    }    protected override function generate():Number    {      return this.next( 32) / uint.MAX_VALUE;    }    public override function getSeed():uint    {      return ( super.getSeed() ^ CRandom.MULT);    }    public override function setSeed( nSeed:uint):void    {      super.setSeed( nSeed ^ CRandom.MULT);    }  }}