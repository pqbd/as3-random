package alx.common.util{  /**   * Random number generator.   * @author Alexander Volkov   * @version 1.0   */  public class CRandom   {    /** internal needs constant*/    private static const MAX_RATIO:Number = 1 / uint.MAX_VALUE;    /** Seed*/    private var m_nSeed:uint;    /**     * Creates new random generator.     * @param nSeed uint     */    public function CRandom( nSeed:uint = 0):void    {      if ( nSeed == 0)        this.setSeed(( Math.random() * uint.MAX_VALUE));      else        this.setSeed( nSeed);    }    /**     * Gets current seed value.     * @return uint     */    public function getSeed():uint    {      return this.m_nSeed;    }    /**     * Sets current seed value.     * @return uint     */    public function setSeed( nSeed:uint):void    {      this.m_nSeed = nSeed;    }    /**     * Gets next random number from [0;1).     * @return Number     */    protected function next():Number    {      this.m_nSeed = this.m_nSeed * 0x5DEECE66D;      return ( this.m_nSeed * CRandom.MAX_RATIO);    }    /**     * Gets next random float from [nMin;nMax).     * @param nMin Number     * @param nMax Number     * @return Number     */    public function nextFloat( nMin:Number = NaN, nMax:Number = NaN):Number    {      if ( isNaN( nMin))      {        nMin = 0;        if ( isNaN( nMax))          nMax = 1;      }      else      if ( isNaN( nMax))      {        nMax = nMin;        nMin = 0;      }      return ( this.next() * ( nMax - nMin) + nMin);    }    /**     * Gets next boolean value with a certain chance.     * @param nChance Number     * @return Boolean     */    public function nextBoolean( nChance:Number = 0.5):Boolean    {      return ( this.next() < nChance);    }    /**     * Gets next integer value from [nMin;nMax).     * @param nMin Number     * @param nMax Number     * @return int     */    public function nextInt( nMin:Number, nMax:Number = NaN):int    {      return Math.floor( this.nextFloat( nMin, nMax));    }    /**     * Gets next sign (1 or -1) with a certain chance.     * @param nChance Number     * @return int     */    public function nextSign( nChance:Number = 0.5):int    {      return this.nextBoolean( nChance) ? 1 : -1;    }    /**     * Gets next bit (1 or 0) with a certain chance.     * @param nChance Number     * @return int     */    public function nextBit( nChance:Number = 0.5):int    {      return this.nextBoolean( nChance) ? 1 : 0;    }  }}